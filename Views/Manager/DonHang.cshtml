<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AromaCafé - Quản lý Đơn Hàng</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f8f8f8;
        }

        .header {
            display: flex;
            align-items: center;
            padding: 10px 20px;
            background-color: white;
            border-bottom: 1px solid #e0e0e0;
        }

        .logo {
            display: flex;
            align-items: center;
            margin-right: 30px;
        }

        .logo-circle {
            width: 50px;
            height: 50px;
            background-color: #6d4c41;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            margin-right: 10px;
        }

        .logo-text {
            font-size: 24px;
            font-weight: bold;
            color: #6d4c41;
        }

        .nav-menu {
            display: flex;
            flex-grow: 1;
        }

        .nav-menu a {
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            font-weight: bold;
        }

        .nav-menu a.active {
            background-color: #6d4c41;
            color: white;
            border-radius: 4px;
        }

        .user-section {
            display: flex;
            align-items: center;
        }

        .notification-icon {
            margin-right: 15px;
            font-size: 20px;
            color: #6d4c41;
        }

        .user-profile {
            display: flex;
            align-items: center;
            background-color: #6d4c41;
            color: white;
            padding: 5px 10px;
            border-radius: 50px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #6d4c41;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            margin-right: 10px;
        }

        .user-role {
            font-size: 12px;
            opacity: 0.8;
        }

        .content {
            padding: 20px;
        }

        .page-title {
            font-size: 28px;
            color: #6d4c41;
            margin-bottom: 20px;
        }

        .action-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .search-bar {
            display: flex;
            flex-grow: 1;
            margin-right: 20px;
            border: none !important;
            background-color: transparent !important;
        }

        .search-input {
            flex-grow: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            outline: none;
            border-radius: 4px 0 0 4px;
            font-size: 16px;
        }

        .search-button {
            background-color: #8d6e63;
            color: white;
            border: none;
            padding: 0 20px;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            font-weight: bold;
        }

        .add-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        .add-button i {
            margin-right: 8px;
        }

        .category-filter {
            display: flex;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .category-item {
            padding: 12px 20px;
            cursor: pointer;
            color: black;
            border: none;
            /* font-weight: bold; */
            text-decoration: none;
        }

        .category-item.active {
            background-color: #8B6D5A;
            color: white;
        }
        .category-item:link,
        .category-item:visited,
        .category-item:hover,
        .category-item:active,
        .category-item:focus {
            text-decoration: none;
            outline: none;
        }

        .orders-table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .orders-table th {
            background-color: #8B6D5A !important;
            color: white !important;
            padding: 15px;
            text-align: left;
        }

        .orders-table td {
            padding: 15px;
            border-bottom: 1px solid #eee;
        }

        .orders-table tr:hover {
            background-color: #f9f9f9;
        }

        .status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
        }

        .status-đang-xử-lý {
            background-color: #fff8e1;
            color: #ffa000;
        }

        .status-mới {
            background-color: #e3f2fd;
            color: #1976d2;
        }

        .status-hoàn-thành {
            background-color: #e8f5e9;
            color: #388e3c;
        }

        .status-đã-hủy {
            background-color: #ffebee;
            color: #d32f2f;
        }

        .action-btn {
            display: inline-block;
            min-width: 60px;
            text-align: center;
            padding: 6px 12px;
            margin: 0 2px;
            border-radius: 4px;
            text-decoration: none;
            cursor: pointer;
            font-family: inherit;
            font-size: inherit;
            border: none;
        }

        .view-btn {
            background-color: #e0e0e0;
            color: #333;
        }

        .edit-btn {
            background-color: #8d6e63;
            color: white;
        }

        .delete-btn {
            background-color: #f44336;
            color: white;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .pagination-btn {
            padding: 8px 15px;
            margin: 0 5px;
            border: 1px solid #ddd;
            background-color: white;
            cursor: pointer;
            text-decoration: none;
            color: black;
        }

        .pagination-btn.active {
            background-color: #6d4c41;
            color: white;
            border-color: #6d4c41;
        }
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-success {
            color: #3c763d;
            background-color: #dff0d8;
            border-color: #d6e9c6;
        }
    </style>
</head>
@using pbl3_QLCF.Data;
@model IEnumerable<DonHang>
<body>
    @{
        Html.RenderPartial("~/Views/Manager/sharedAll.cshtml");
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
    <main class="content">
        <h1 class="page-title">Quản lý Đơn Hàng</h1>

        <div class="action-bar">
            <div class="search-bar">
                <form method="get" action="@Url.Action("DonHang")" style="display: flex; width: 100%;">
                    <input type="text" name="search" class="search-input" placeholder="Tìm kiếm theo mã đơn, khách hàng..." value="@ViewBag.SearchString">
                    <input type="hidden" name="category" value="@ViewBag.CurrentCategory">
                    <input type="hidden" name="page" value="1">
                    <button type="submit" class="search-button" id="search-btn">Tìm</button>
                </form>
            </div>
        </div>

        <div class="category-filter">
            <a href="@Url.Action("DonHang", new { category = "all", search = ViewBag.SearchString })" 
                class="category-item @(ViewBag.CurrentCategory == "all" ? "active" : "")">Tất cả</a>
            <a href="@Url.Action("DonHang", new { category = "new", search = ViewBag.SearchString })" 
                class="category-item @(ViewBag.CurrentCategory == "new" ? "active" : "")">Mới</a>
            <a href="@Url.Action("DonHang", new { category = "processing", search = ViewBag.SearchString })" 
                class="category-item @(ViewBag.CurrentCategory == "processing" ? "active" : "")">Đang xử lý</a>
            <a href="@Url.Action("DonHang", new { category = "completed", search = ViewBag.SearchString })" 
                class="category-item @(ViewBag.CurrentCategory == "completed" ? "active" : "")">Hoàn thành</a>
        </div>

        <table class="orders-table">
            <thead>
                <tr>
                    <th>Mã ĐH</th>
                    <th>Mã KH</th>
                    <th>Mã NV</th>
                    <th>Mã Bàn</th>
                    <th>Thời Gian Đặt</th>
                    <th>Tổng Tiền</th>
                    <th>Thanh Toán</th>
                    <th>Trạng Thái</th>
                    <th>Thao Tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.MaDh</td>
                        <td>@item.MaKh</td>
                        <td>@item.MaNv</td>
                        <td>@item.MaBan</td>
                        <td>@(item.ThoiGianDat?.ToString("dd/MM/yyyy HH:mm"))</td>
                        <td>@item.TongTien?.ToString("#,###") VND</td>
                        <td>@item.ThanhToan</td>
                            <td><span class="status status-@(item.TrangThaiDh?.ToLower().Replace(" ", "-"))">@item.TrangThaiDh</span></td>
                        <td>
                            <a href="@Url.Action("XemDonHang", new { id = item.MaDh})" class="action-btn view-btn">Xem</a>
                            <a href="@Url.Action("SuaDonHang", new { id = item.MaDh})" class="action-btn edit-btn">Sửa</a>
                            <form method="post" action="@Url.Action("XoaDonHang", new { id = item.MaDh})" style="display: inline;"
                                onsubmit="return confirm('Bạn có chắc chắn muốn xóa sản phẩm này không?');">
                                    @Html.AntiForgeryToken()
                                <button type="submit" class="action-btn delete-btn" >Xóa</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="pagination">
            @{
                int currentPage = ViewBag.CurrentPage;
                int totalPages = ViewBag.TotalPages;
                if (currentPage > 1)
                {
                    <a href="@Url.Action("DonHang", new { page = 1, category = ViewBag.currentCategory, search = ViewBag.SearchString })" class="pagination-btn">&lt;&lt</a>
                }
                if (currentPage > 1)
                {
                    <a href="@Url.Action("DonHang", new { page = ViewBag.CurrentPage - 1, category = ViewBag.CurrentCategory, search = ViewBag.SearchString })" class="pagination-btn">&lt</a>
                }
                int startPage = Math.Max(1, currentPage - 2); // Show 2 pages before current
                int endPage = Math.Min(totalPages, currentPage + 2); // Show 2 pages after current

                if (endPage - startPage + 1 < 5 && totalPages >= 5)
                {
                    if (currentPage <= 3)
                    {
                        // Nếu đang ở gần đầu, hiển thị 5 trang đầu
                        endPage = Math.Min(5, totalPages);
                        startPage = 1;
                    }
                    else
                    {
                        // Nếu đang ở gần cuối, hiển thị 5 trang cuối
                        startPage = Math.Max(1, totalPages - 4);
                        endPage = totalPages;
                    }
                }
                for (int i = startPage; i <= endPage; i++)
                {
                    <a href="@Url.Action("DonHang", new { page = i, category = ViewBag.CurrentCategory, search = ViewBag.SearchString })" 
                        class="pagination-btn @(ViewBag.CurrentPage == i ? "active" : "")">@i</a>
                }

                // Hiển thị nút trang sau [>]
                if (currentPage < totalPages)
                {
                    <a href="@Url.Action("DonHang", new { page = currentPage + 1, category = ViewBag.CurrentCategory, search = ViewBag.SearchString })" class="pagination-btn">
                        &gt;
                    </a>
                }
                //Hiển thị nút trang đầu cùng [>>]
                if (currentPage < totalPages)
                {
                    <a href="@Url.Action("DonHang", new { page = totalPages, category = ViewBag.CurrentCategory, search = ViewBag.SearchString})" class="pagination-btn">
                        &gt;&gt;
                    </a>
                }
            }
        </div>
    </main>
</body>
</html>